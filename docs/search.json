[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Scrollytelling",
    "section": "",
    "text": "Scrollytelling is a style of presentation where information is revealed or highlighted while scrolling (down). It allows to focus on specific aspects of content before moving on. On a technical level, it is realized with the Closeread extension for Quarto. You can look at the code that generated this file by clicking on the ‘&lt;/&gt; Code’ button in the top right corner."
  },
  {
    "objectID": "index.html#importing-data",
    "href": "index.html#importing-data",
    "title": "Scrollytelling",
    "section": "Importing data",
    "text": "Importing data\nThe first step in every analysis is data import. We will work with data collected as part of the Master Thesis Insights into real-world human light exposure: relating self-report with eye-level light logging by Carolina Guidolin (2023).\n\n\n\n\n\n\n\n\n\nWe start by loading LightLogR and setting up some environmental variables.\n\n\n\n\nThe data is stored in 17 text files in the data/ folder. You can access the data yourself through the LightLogR GitHub repository.\n\n\n\n\nNext we require a time zone of data collection. Our data was collected in the “Europe/Berlin” time zone. If uncertain which time zones are valid, use the OlsonNames() function.\n\n\n\n\nLastly, the participant Ids are stored in the first three digits of each file name. We will extract them and store them in a column called Id. The following code defines the pattern as a regular expression, which will extract the first three digits from the file name.\n\n\n\n\nThis is all the setup we need. Now we can import the data by specifying the correct import function (Data were collected with the ActLumus device by Condor Instruments). The right way to specify this is through the import$device function. If you start typing import$ in the IDE of your choice, autocomplete will most likely show you all available devices. You can also look at the function documentation for import to get an overview of all devices currently supported.\n\n\n\n\n\n\n\nlibrary(LightLogR)\npath &lt;- \"data\"\nfiles &lt;- list.files(path, full.names = TRUE)\ntz &lt;- \"Europe/Berlin\"\npattern &lt;- \"^(\\\\d{3})\"\ndata &lt;- import$ActLumus(files, tz = tz, auto.id = pattern)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAfter a short import process, the data are now imported and stored in the data object. By default, LighLogR shows a rich import message and an overview plot. Let’s go through them one by one.\n\n\n\n\nImport messages start with general information about the amount of observations, id’s and files.\n\n\n\n\nThe next lines cover time zone related info. In this case it specifically tells us, that two files cross daylight savings time - this means you shold make sure that either your file contains data in UTC, or that the device’s timestamp is already adjusted after the jump. If not, you can use the argument dst_adjustment = TRUE during import.\n\n\n\n\nNext comes some general information about the collection time: when observations start, end, and what time span is covered.\n\n\n\n\nLastly, the observation intervals are summarized. For every Id, the number and percent of observation intervals are shown. More rows can be printed with the print_n argument.\n\n\n\n\n\n\n\n\n\nSuccessfully read in 1'034'650 observations across 17 Ids from 17 ActLumus-file(s).\nTimezone set is Europe/Berlin.\nObservations in the following 2 file(s) cross to or from daylight savings time (DST): \n221_actlumus_Log_1607_20231030121531432\n222_actlumus_Log_1020_20231030140039534\nPlease make sure that the timestamps in the source files correctly reflect these changes from DST&lt;&gt;ST. \nTo adjust datetimes after a jump, set `dst_adjustment = TRUE` or see `?dst_change_handler` for manual adjustment.\n\nFirst Observation: 2023-08-14 10:55:21\nLast Observation: 2023-10-30 15:00:32\nTimespan: 77 days\n\nObservation intervals: \n  Id    interval.time     n pct  \n1 201   10s           60042 100% \n2 202   10s           59957 100% \n3 204   10s           61980 100% \n4 205   10s           61015 100% \n5 206   10s           60691 100% \n# ℹ 28 more rows\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFinally, an overview plot is shown (if auto.plot = FALSE is not set). The plot gives a quick idea when (x-axis) data were collected among the varying participants (y-axis).\n\n\n\n\nImportantly, the plot shows implicit gaps in the data. Based on the main epoch calculated for each participant, LightLogR will draw an uninterrupted sequence from first observation till last and checks, where actual data points are available.\n\n\n\n\nWhen there are gaps, the plot will visualize this with grey areas, but also in the legend (sometimes gaps are to small to visualize in the overview).\n\n\n\n\nThe overview plot can be accessed anytime with the gg_overview() function in LightLogR, which has many customization options."
  },
  {
    "objectID": "index.html#cleaning-your-data",
    "href": "index.html#cleaning-your-data",
    "title": "Scrollytelling",
    "section": "Cleaning your data",
    "text": "Cleaning your data\nlore ipsum…."
  }
]